#include "src/ast/build.hh"
#include "src/ast/ast.hh"
#include "src/frontend/error.hh"
#include "src/overloaded.hh"

extern "C" {
#include "src/ByBnfc/Absyn.h"
#include "src/ByBnfc/Parser.h"
} // extern "C"

#include <charconv>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <memory>
#include <regex>
#include <sys/mman.h>
#include <type_traits>
#include <unistd.h>
#include <utility>

template <class Func>
class Defer {
    Func func_;

public:
    // NOLINTNEXTLINE(google-explicit-constructor)
    Defer(Func func) try
    : func_(std::move(func))
    {
    } catch (...) {
        func();
        throw;
    }

    Defer(const Defer&) = delete;
    Defer(Defer&&) = delete;
    Defer& operator=(const Defer&) = delete;
    Defer& operator=(Defer&&) = delete;

    ~Defer() {
        try {
            func_();
        } catch (...) {
        }
    }
};

namespace ast {

static_assert(std::is_same_v<::Integer, int_t>);

struct Translator {
    frontend::ErrorPrinter& errp;

    std::string translate(char* str) {
        Defer freer{[str]{ free(str); }};
        return str;
    }

    static constexpr ast::SrcLoc fixed_sloc(int line, int column) noexcept {
        // In BNFC's AST, columns are numbered from 1 in the first line, and from 0 in other lines
        return {.line = line, .column = (line != 1) + column};
    }

    template<class Node, std::enable_if_t<std::is_pointer_v<Node>, int> = 0>
    ast::SrcLoc fixed_sloc(Node op) {
        Defer freer{[op]{ free(op); }};
        return fixed_sloc(op->line_number, op->char_number);
    }

    TRANSLATE_TO_ENUM(AddOp, BinOp) {
        CASE(Plus, ADD) {}
        CASE(Minus, SUB) {}
    }

    TRANSLATE_TO_ENUM(MulOp, BinOp) {
        CASE(Times, MUL) {}
        CASE(Div, DIV) {}
        CASE(Mod, MOD) {}
    }

    TRANSLATE_TO_ENUM(RelOp, BinOp) {
        CASE(LTH) {}
        CASE(LE) {}
        CASE(GTH) {}
        CASE(GE) {}
        CASE(EQU, EQ) {}
        CASE(NE) {}
    }

    TRANSLATE(Type) {
        CASE(TInt) {}
        CASE(TStr) {}
        CASE(TBool) {}
        CASE(TVoid) {}
        CASE(TArray) {
            .elem_type = std::make_unique<Type>(translate(x.type_)),
        }
        CASE(TClass) {
            .name = translate(x.ident_),
        }
    }

    TRANSLATE(Expr) {
        CASE(EVar) {
            .name = translate(x.ident_),
        }
        CASE(ELitInt) {
            .str_val = translate(x.intliteral_),
        }
        CASE(ELitTrue, ELitBool) {
            .val = true,
        }
        CASE(ELitFalse, ELitBool) {
            .val = false,
        }
        CASE(ESelf) {}
        CASE(ENull) {}
        CASE(ECastedNull) {
            .type = [&] {
                auto e = translate(x.expr_);
                return std::visit(overloaded{
                    [&](const Expr::EVar& var) {
                        return Type {
                            .val = Type::TClass{.name = var.name},
                            .sloc = e.sloc,
                        };
                    },
                    [&](const auto& /*unused*/) -> Type {
                        errp.error(e.sloc, "invalid expression: expected class or array type as the cast type");
                        __builtin_unreachable();
                    },
                }, e.val);
            }(),
        }
        CASE(ECastedArrNull, ECastedNull) {
            .type = [&] {
                auto type = translate(x.type_);
                auto sloc = type.sloc;
                return Type {
                    .val = Type::TArray{
                        .elem_type = std::make_unique<Type>(std::move(type)),
                    },
                    .sloc = sloc,
                };
            }(),
        }
        CASE(ELitStr) {
            .val = translate(x.string_),
        }
        CASE(EArrElem) {
            .arr = std::make_unique<Expr>(translate(x.expr_1)),
            .index = std::make_unique<Expr>(translate(x.expr_2)),
            .lbracket_sloc =
                fixed_sloc(x.lbracket_),
        }
        CASE(ECallFunc) {
            .func_name = translate(x.ident_),
            .args = std::make_unique<std::vector<Expr>>(translate(x.listexpr_)),
            .lparen_sloc = fixed_sloc(x.lparen_),
        }
        CASE(EField) {
            .object = std::make_unique<Expr>(translate(x.expr_)),
            .field_name = translate(x.ident_),
            .dot_sloc = fixed_sloc(x.dot_),
        }
        CASE(ECallMethod) {
            .object = std::make_unique<Expr>(translate(x.expr_)),
            .method_name = translate(x.ident_),
            .args = std::make_unique<std::vector<Expr>>(translate(x.listexpr_)),
            .dot_sloc = fixed_sloc(x.dot_),
            .lparen_sloc = fixed_sloc(x.lparen_),
        }
        CASE(ENewArray) {
            .elem_type = translate(x.type_),
            .size = std::make_unique<Expr>(translate(x.expr_)),
        }
        CASE(ENewClass) {
            .class_name = translate(x.ident_),
        }
        CASE(ENeg, EUnaryOp) {
            .val = std::make_unique<Expr>(translate(x.expr_)),
            .op = UnaryOp::NEG,
            .op_sloc = fixed_sloc(x.negop_),
        }
        CASE(ENot, EUnaryOp) {
            .val = std::make_unique<Expr>(translate(x.expr_)),
            .op = UnaryOp::NOT,
            .op_sloc = fixed_sloc(x.notop_),
        }
        CASE(EMul, EBinOp) {
            .left = std::make_unique<Expr>(translate(x.expr_1)),
            .right = std::make_unique<Expr>(translate(x.expr_2)),
            .op = translate(x.mulop_),
            .op_sloc = fixed_sloc(x.mulop_),
        }
        CASE(EAdd, EBinOp) {
            .left = std::make_unique<Expr>(translate(x.expr_1)),
            .right = std::make_unique<Expr>(translate(x.expr_2)),
            .op = translate(x.addop_),
            .op_sloc = fixed_sloc(x.addop_),
        }
        CASE(ERel, EBinOp) {
            .left = std::make_unique<Expr>(translate(x.expr_1)),
            .right = std::make_unique<Expr>(translate(x.expr_2)),
            .op = translate(x.relop_),
            .op_sloc = fixed_sloc(x.relop_),
        }
        CASE(EAnd, EBinOp) {
            .left = std::make_unique<Expr>(translate(x.expr_1)),
            .right = std::make_unique<Expr>(translate(x.expr_2)),
            .op = BinOp::AND,
            .op_sloc = fixed_sloc(x.andop_),
        }
        CASE(EOr, EBinOp) {
            .left = std::make_unique<Expr>(translate(x.expr_1)),
            .right = std::make_unique<Expr>(translate(x.expr_2)),
            .op = BinOp::OR,
            .op_sloc = fixed_sloc(x.orop_),
        }
    }
    TRANSLATE_LIST(Expr);

    TRANSLATE(DeclItem) {
        CASE(DNoInit) {
            .name = translate(x.ident_),
        }
        CASE(DInit) {
            .name = translate(x.ident_),
            .val = translate(x.expr_),
            .ass_sloc = fixed_sloc(x.assop_),
        }
    }
    TRANSLATE_LIST(DeclItem);

    TRANSLATE(Stmt) {
        CASE(SEmpty) {}
        CASE(SBlock) {
            .block = std::make_unique<Block>(translate(x.block_)),
        }
        CASE(SDecl) {
            .type = translate(x.type_),
            .items = translate(x.listdeclitem_),
        }
        CASE(SAss) {
            .dest = translate(x.expr_1),
            .val = translate(x.expr_2),
            .ass_sloc = fixed_sloc(x.assop_),
        }
        CASE(SIncr) {
            .dest = translate(x.expr_),
            .op_sloc = fixed_sloc(x.incrop_),
        }
        CASE(SDecr) {
            .dest = translate(x.expr_),
            .op_sloc = fixed_sloc(x.decrop_),
        }
        CASE(SRet) {
            .val = translate(x.expr_),
        }
        CASE(SVRet) {}
        CASE(SExpr) {
            .val = translate(x.expr_),
        }
        CASE(SWhile) {
            .cond = translate(x.expr_),
            .body = std::make_unique<Stmt>(translate(x.stmt_)),
        }
        CASE(SFor) {
            .iter_type = translate(x.type_),
            .iter_name = translate(x.ident_),
            .arr = translate(x.expr_),
            .body = std::make_unique<Stmt>(translate(x.stmt_)),
        }
        CASE(SIf) {
            .cond = translate(x.expr_),
            .true_branch = std::make_unique<Stmt>(translate(x.stmt_)),
            .false_branch = nullptr,
        }
        CASE(SIfElse, SIf) {
            .cond = translate(x.expr_),
            .true_branch = std::make_unique<Stmt>(translate(x.stmt_1)),
            .false_branch = std::make_unique<Stmt>(translate(x.stmt_2)),
        }
    }
    TRANSLATE_LIST(Stmt);

    TRANSLATE_NO_CASE(Block) {
        .stmts = translate(x.liststmt_),
    }

    TRANSLATE_NO_CASE(FnArg) {
        .type = translate(x.type_),
        .name = translate(x.ident_),
    }
    TRANSLATE_LIST(FnArg);

    TRANSLATE_NO_CASE(FieldDeclItem) {
        .name = translate(x.ident_),
    }
    TRANSLATE_LIST(FieldDeclItem);

    TRANSLATE(ClassMemberDef) {
        CASE(FieldDecl) {
            .type = translate(x.type_),
            .names = translate(x.listfielddeclitem_),
        }
        CASE(Method) {
            .name = translate(x.ident_),
            .ret_type = translate(x.type_),
            .args = translate(x.listfnarg_),
            .body = translate(x.block_),
        }
    }
    TRANSLATE_LIST(ClassMemberDef);

    TRANSLATE(TopDef) {
        CASE(FnDef) {
            .name = translate(x.ident_),
            .ret_type = translate(x.type_),
            .args = translate(x.listfnarg_),
            .body = translate(x.block_),
        }
        CASE(ClassDef) {
            .name = translate(x.ident_),
            .base_class_name = std::nullopt,
            .members = translate(x.listclassmemberdef_),
        }
        CASE(ClassDefExtends, ClassDef) {
            .name = translate(x.ident_1),
            .base_class_name = translate(x.ident_2),
            .members = translate(x.listclassmemberdef_),
        }

    }
    TRANSLATE_LIST(TopDef);

    TRANSLATE_NO_CASE(Program) {
        .top_defs = translate(x.listtopdef_),
    }
};

template<class Func>
static std::string intercept_stderr(Func&& func) {
    // Save current stderr
    int fd = dup(STDERR_FILENO); // NOLINT(android-cloexec-dup)
    if (fd < 0) {
        fprintf(stderr, "dup() - %s\n", strerror(errno));
        exit(1);
    }
    // Setup new stderr
    int memfd = memfd_create("temporary stderr", MFD_CLOEXEC);
    if (memfd < 0) {
        fprintf(stderr, "memfd_create() - %s\n", strerror(errno));
        exit(1);
    }
    if (dup2(memfd, STDERR_FILENO) < 0) {
        fprintf(stderr, "dup2() - %s\n", strerror(errno));
        exit(1);
    }
    auto restore_stderr = [&] {
        // Restore stderr
        if (dup2(fd, STDERR_FILENO) < 0) {
            dprintf(fd, "dup2() - %s\n", strerror(errno));
            exit(1);
        }
        if (close(fd)) {
            fprintf(stderr, "close() - %s\n", strerror(errno));
            exit(1);
        }
    };
    try {
        std::forward<Func>(func)();
    } catch (...) {
        restore_stderr();
        if (close(memfd)) {
            fprintf(stderr, "close() - %s\n", strerror(errno));
            exit(1);
        }
        throw;
    }
    restore_stderr();
    // Read the intercepted stderr
    try {
        off_t len = lseek(memfd, 0, SEEK_CUR);
        if (len < 0) {
            fprintf(stderr, "lseek() - %s\n", strerror(errno));
            exit(1);
        }
        std::string res(len, '\0');
        off_t pos = 0;
        while (pos < len) {
            ssize_t rc = pread(memfd, res.data() + pos, len - pos, pos);
            if (rc < 0) {
                fprintf(stderr, "pread() - %s\n", strerror(errno));
                exit(1);
            }
            if (rc == 0) {
                fprintf(stderr, "pread() == 0, but file is larger\n");
                exit(1);
            }
            pos += rc;
        }
        return res;
    } catch (...) {
        if (close(memfd)) {
            fprintf(stderr, "close() - %s\n", strerror(errno));
            exit(1);
        }
        throw;
    }
}

extern "C" void Lattelex_destroy();

Program build(const std::string& file_contents, frontend::ErrorPrinter& errp) {
    FILE *f = tmpfile();
    if (f == nullptr) {
        fprintf(stderr, "tmpfile() == NULL\n");
        exit(1);
    }
    auto fcloser = Defer{[f]{ fclose(f); }};
    errno = 0;
    if (fwrite(file_contents.data(), 1, file_contents.size(), f) != file_contents.size()) {
        fprintf(stderr, "fwrite() - %s\n", strerror(errno));
        exit(1);
    }
    rewind(f);
    ::Program prog;
    auto error_str = intercept_stderr([&] {
        prog = pProgram(f);
    });
    if (prog) {
        return Translator{.errp = errp}.translate(prog);
    }
    // Parse and throw the error
    std::smatch sm;
    if (not std::regex_match(error_str, sm, std::regex{R"=(error: (\d+),(\d+): (.*)\n)="})) {
        errp.error({}, error_str);
        __builtin_unreachable();
    }
    auto parse_to = [&](const auto& str, auto& dest) {
        auto [ptr, ec] = std::from_chars(str.data(), str.data() + str.size(), dest);
        return !(ptr != str.data() + str.size() or ec != std::errc());
    };
    int line;
    if (not parse_to(sm.str(1), line)) {
        errp.error({}, error_str);
        __builtin_unreachable();
    }
    int column;
    if (not parse_to(sm.str(2), column)) {
        errp.error({}, error_str);
        __builtin_unreachable();
    }
    errp.error(Translator::fixed_sloc(line, column), sm.str(3).data());
    __builtin_unreachable();
}

} // namespace ast
