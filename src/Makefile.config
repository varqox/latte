ifneq ($(MAKEFILE_CONFIG_INCLUDED), $(MAKELEVEL))
MAKEFILE_CONFIG_INCLUDED := $(MAKELEVEL)

export

PREFIX ?=

MAKECONFIG_DIR := $(dir $(lastword $(MAKEFILE_LIST)))

SHELL := /bin/sh

# Clear default rules
.SUFFIXES:

# Root directory
ROOT ?= $(abspath $(dir $(firstword $(MAKEFILE_LIST))))

# Optimizations
OPTIMIZATIONS ?= -O2 -g

# Standard choosing
# CSTD_FLAG ?= -std=gnu11
CSTD_FLAG ?= -std=c11
CXXSTD_FLAG ?= -std=c++17

# Extra options to compile project with
EXTRA_C_FLAGS ?=
EXTRA_CXX_FLAGS ?=

# Extra options to link project with
EXTRA_LD_FLAGS ?=

# Useful when building external libraries
INTERNAL_EXTRA_C_FLAGS ?=
INTERNAL_EXTRA_CXX_FLAGS ?=
INTERNAL_EXTRA_LD_FLAGS ?=

# Warning options to compile with
WARNING_FLAGS ?= -Wall -Wextra -Wfloat-equal -Wno-unused-result -Wunreachable-code

ifeq ($(firstword $(CC)), clang)
ifeq ($(firstword $(CXX)), clang++)
WARNING_FLAGS += -Wdocumentation -Wgnu -Wunused-lambda-capture
endif
endif

CFLAGS = $(CSTD_FLAG) $(WARNING_FLAGS) $(OPTIMIZATIONS) $(INTERNAL_EXTRA_C_FLAGS) $(EXTRA_C_FLAGS)
CXXFLAGS = $(CXXSTD_FLAG) $(WARNING_FLAGS) $(OPTIMIZATIONS) $(INTERNAL_EXTRA_CXX_FLAGS) $(EXTRA_CXX_FLAGS)
LFLAGS = $(filter-out -gsplit-dwarf, $(CXXFLAGS) -fuse-ld=gold $(INTERNAL_EXTRA_LD_FLAGS) $(EXTRA_LD_FLAGS))
LD ?= ld.gold

# Shell commands
MV := mv -f
CP := cp -rf
UPDATE := $(CP) -u
RM := rm -f
MKDIR := mkdir -p

DEBUG := 0
VERBOSE := 0

ifeq ($(DEBUG), 1)
OPTIMIZATIONS += -DDEBUG -g -gsplit-dwarf -fno-omit-frame-pointer
else ifeq ($(DEBUG), 2)
OPTIMIZATIONS += -DDEBUG -O0 -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -fsanitize=address -fsanitize=leak -fsanitize=undefined -fno-omit-frame-pointer
else ifeq ($(DEBUG), 3)
OPTIMIZATIONS += -DDEBUG -g -gsplit-dwarf -O0 -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -fsanitize=address -fsanitize=leak -fsanitize=undefined -fno-omit-frame-pointer
else ifeq ($(DEBUG), 4)
OPTIMIZATIONS += -g -gsplit-dwarf -O0 -fno-omit-frame-pointer
else ifeq ($(DEBUG), 5)
OPTIMIZATIONS += -DDEBUG -O0
else ifeq ($(DEBUG), 6)
OPTIMIZATIONS += -DDEBUG -g -gsplit-dwarf -O0 -fno-omit-frame-pointer
else ifeq ($(DEBUG), 7)
OPTIMIZATIONS += -DDEBUG -g -gsplit-dwarf -O0 -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -fno-omit-frame-pointer
else ifeq ($(DEBUG), 8)
OPTIMIZATIONS += -DDEBUG -g -gsplit-dwarf -O0 -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -fsanitize=undefined -fno-omit-frame-pointer
endif

# Rest
ifeq ($(VERBOSE),1)
	Q :=
	P =
else
	Q := @
	P = @printf "  %-8s %s\n" '$(1)' '$(subst $(ROOT),,$(abspath $(2)))';
	MAKEFLAGS += --no-print-directory -s
endif

DOLLAR = $$

# Usage $(call TIME_CMD, NAME_TO_PRINT, FILE, COMMAND)
define TIME_CMD
(beg_time=$(DOLLAR)(date '+%s%N'); \
($(3)); \
cmd_exit_code=$(DOLLAR)?; \
end_time=$(DOLLAR)(date '+%s%N'); \
diff=$(DOLLAR)(($(DOLLAR){end_time%???????} - $(DOLLAR){beg_time%???????})); \
diff=$(DOLLAR)(printf '[%03i' "$(DOLLAR)diff"); \
sec=$(DOLLAR){diff%??}; \
printf '%3s.%ss]   %s    ~%s\n' "$(DOLLAR)sec" "$(DOLLAR){diff#$(DOLLAR)sec}" '$(subst $(ROOT),,$(abspath $(2)))' '$(1)'; \
exit $(DOLLAR)cmd_exit_code)
endef

.PHONY: build-info
build-info:
ifeq ($(MAKELEVEL), 0)
	@echo "DEBUG: $(DEBUG)"
	@echo "CC -> $(CC)"
	@echo "CXX -> $(CXX)"
endif

# If $(MAKECMDGOALS) is empty or contains other targets than the ones below then require build-info
ifneq ($(filter-out clean install uninstall run help, $(if $(MAKECMDGOALS),$(MAKECMDGOALS),all)),)
# This is quite ugly way to call build-info at first, but I suppose there is no other simpler way
-include /Makefile-Makefile.config
.PHONY: /Makefile-Makefile.config
/Makefile-Makefile.config: build-info
endif

define load_dependencies
ifneq ($(filter clean, $(MAKECMDGOALS)), clean)
-include $(1:=.deps)
endif
endef

define include_makefile
$$(shell sed 's@$$$$(PREFIX)@$(dir $(1))@g' $(1) > .Makefile.include_makefile)
-include .Makefile.include_makefile
$$(shell rm .Makefile.include_makefile)
endef

# %.o are not the only ones left, because it may be useful to specify static library as an source
SRCS_TO_OBJS = $(patsubst %.cpp, %.o, $(patsubst %.cc, %.o, $(patsubst %.c, %.o, $(1))))
SRCS_TO_BUILD_ARTIFACTS = $(filter %.o, $(call SRCS_TO_OBJS, $(1))) $(patsubst %.o, %.dwo, $(filter %.o, $(call SRCS_TO_OBJS, $(1)))) $(1:=.deps) $(1:=.cmd.deps)
# Static libraries should come after object that use them in the command invoking compiler
MOVE_OBJS_TO_THE_BEGINNIG = $(filter %.o,$(1)) $(filter-out %.o,$(1))
ONLY_SRCS = $(filter %.cpp,$(1)) $(filter %.cc,$(1)) $(filter %.c,$(1))

define NEWLINE


endef

# Usage: $(eval $(call add_executable, executable_name, internal_flags, sources))
# Example:
# define MY_FLAGS =
# INTERNAL_C_FLAGS = -I /usr/include/something
# INTERNAL_LD_FLAGS = -lsomething
# endef
# $(eval $(call add_executable, foo_bar, $(MY_FLAGS), foo.c bar.c))
define add_executable
$(eval $(call load_dependencies, $(3)))
$(1): override INTERNAL_EXTRA_C_FLAGS =
$(1): override INTERNAL_EXTRA_CXX_FLAGS =
$(1): override INTERNAL_EXTRA_LD_FLAGS =
$(patsubst INTERNAL_EXTRA_%,$(NEWLINE)$(1) $(patsubst %,%.link.cmd.deps,$(1)) $(call SRCS_TO_OBJS, $(call ONLY_SRCS, $(3))): override INTERNAL_EXTRA_%,$(2))
$(patsubst %,%.link.cmd.deps,$(1)): VARS_DEPS_CONTENTS = "$$(CXX);$$(LFLAGS);$(3)"
$(1): $(call MOVE_OBJS_TO_THE_BEGINNIG, $(call SRCS_TO_OBJS, $(3))) $(patsubst %,%.link.cmd.deps,$(1))
	$$(Q)$$(call P,LINK,$$@) \
	$$(call TIME_CMD,LINK,$$@, \
		$$(CXX) $(call MOVE_OBJS_TO_THE_BEGINNIG, $(call SRCS_TO_OBJS, $(3))) $$(LFLAGS) -o $$@ \
	)

BUILD_ARTIFACTS += $(call SRCS_TO_BUILD_ARTIFACTS, $(3)) $(1) $(patsubst %,%.link.cmd.deps,$(1))
endef

# Usage: $(eval $(call add_static_library, static_library_name, internal_flags, sources))
define add_static_library
$(eval $(call load_dependencies, $(3)))
$(1): override INTERNAL_EXTRA_C_FLAGS =
$(1): override INTERNAL_EXTRA_CXX_FLAGS =
$(1): override INTERNAL_EXTRA_LD_FLAGS =
$(patsubst INTERNAL_EXTRA_%,$(NEWLINE)$(1) $(patsubst %,%.stc_lib.cmd.deps,$(1)) $(call SRCS_TO_OBJS, $(call ONLY_SRCS, $(3))): override INTERNAL_EXTRA_%,$(2))
$(patsubst %,%.stc_lib.cmd.deps,$(1)): VARS_DEPS_CONTENTS := "$$(AR);$$(RM);$(3)"
$(1): $(call MOVE_OBJS_TO_THE_BEGINNIG, $(call SRCS_TO_OBJS, $(3))) $(patsubst %,%.stc_lib.cmd.deps,$(1))
	$$(Q)$$(call P,AR,$$@) \
	$$(RM) $$@ && \
	$$(call TIME_CMD,AR,$$@, \
		$$(AR) cr $$@ $(call MOVE_OBJS_TO_THE_BEGINNIG, $(call SRCS_TO_OBJS, $(3))) \
	)

BUILD_ARTIFACTS += $(call SRCS_TO_BUILD_ARTIFACTS, $(3)) $(1) $(patsubst %,%.stc_lib.cmd.deps,$(1))
endef

# Usage: $(eval $(call add_generated_target, target_name, generate command, sources))
# Example: $(eval $(call add_generated_target, ab.tgz, tar -czf $$@ $$^, a.c b.c))
define add_generated_target
$(eval $(call load_dependencies, $(3)))
# subst() is used to change replace $ resulting from specified $$, so that after all evaluation it becomes $ (there will be 2 stages of evaluation: one immediate and one in evaluating VARS_DEPS_CONTENTS value)
$(patsubst %,%.gen.cmd.deps,$(1)): VARS_DEPS_CONTENTS = "$(subst $,$$$$,$(2));$(3)"
$(1): $(3) $(patsubst %,%.gen.cmd.deps,$(1))
	$$(Q)$$(call P,GEN,$$@) \
	$$(call TIME_CMD,GEN,$$@, \
		$(2) \
	)
BUILD_ARTIFACTS += $(1) $(patsubst %,%.gen.cmd.deps,$(1))
endef

.PHONY: clean
clean:
	$(Q)$(RM) $(BUILD_ARTIFACTS)

# Default rules
# Part "-o $@" is needed because without it targets not from CWD are created in CWD
%.o: %.c %.c.cmd.deps
	$(Q)$(call P,CC,$@) \
		$(call TIME_CMD,CC,$@, \
			$(CC) -MD -MF "$*.c.deps" -MQ "$*.o" $< $(CFLAGS) -c -o "$@" \
		)

%.o: %.cc %.cc.cmd.deps
	$(Q)$(call P,CXX,$@) \
		$(call TIME_CMD,CXX,$@, \
			$(CXX) -MD -MF "$*.cc.deps" -MQ "$*.o" $< $(CXXFLAGS) -c -o "$@" \
		)

%.o: %.cpp %.cpp.cmd.deps
	$(Q)$(call P,CXX,$@) \
		$(call TIME_CMD,CXX,$@, \
			$(CXX) -MD -MF "$*.cpp.deps" -MQ "$*.o" $< $(CXXFLAGS) -c -o "$@" \
		)

# C files depend on C compiler and C flags
%.c.cmd.deps: VARS_DEPS_CONTENTS = "$(CC);$(CFLAGS)"
# C++ files depend on C++ compiler and C++ flags
%.cc.cmd.deps %.cpp.cmd.deps: VARS_DEPS_CONTENTS = "$(CXX);$(CXXFLAGS)"

.PRECIOUS: %.cmd.deps

.SECONDEXPANSION:
%.cmd.deps: $$(if $$(findstring $$(VARS_DEPS_CONTENTS),"$$(shell cat '$$@' 2> /dev/null)"), , FORCE)
	$(Q)$(call P,CMD-DEP,$@) $(file > $@,$(VARS_DEPS_CONTENTS))

%-make-format: %
	$(Q)$(call P,FORMAT,$*) \
		clang-format -i $*

.PHONY: FORCE
FORCE:

.DEFAULT_GOAL :=

endif
