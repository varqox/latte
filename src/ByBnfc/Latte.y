/* This Bison file was machine-generated by BNFC */
%locations
%{
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "Absyn.h"

#define YYMAXDEPTH 10000000

typedef struct Latte_buffer_state *YY_BUFFER_STATE;
YY_BUFFER_STATE Latte_scan_string(const char *str);
void Latte_delete_buffer(YY_BUFFER_STATE buf);
extern int yyparse(void);
extern int yylex(void);
extern int Latte_init_lexer(FILE * inp);
extern void yyerror(const char *str);

ListTopDef reverseListTopDef(ListTopDef l)
{
  ListTopDef prev = 0;
  ListTopDef tmp = 0;
  while (l)
  {
    tmp = l->listtopdef_;
    l->listtopdef_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListClassMemberDef reverseListClassMemberDef(ListClassMemberDef l)
{
  ListClassMemberDef prev = 0;
  ListClassMemberDef tmp = 0;
  while (l)
  {
    tmp = l->listclassmemberdef_;
    l->listclassmemberdef_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListFieldDeclItem reverseListFieldDeclItem(ListFieldDeclItem l)
{
  ListFieldDeclItem prev = 0;
  ListFieldDeclItem tmp = 0;
  while (l)
  {
    tmp = l->listfielddeclitem_;
    l->listfielddeclitem_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListFnArg reverseListFnArg(ListFnArg l)
{
  ListFnArg prev = 0;
  ListFnArg tmp = 0;
  while (l)
  {
    tmp = l->listfnarg_;
    l->listfnarg_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListStmt reverseListStmt(ListStmt l)
{
  ListStmt prev = 0;
  ListStmt tmp = 0;
  while (l)
  {
    tmp = l->liststmt_;
    l->liststmt_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListDeclItem reverseListDeclItem(ListDeclItem l)
{
  ListDeclItem prev = 0;
  ListDeclItem tmp = 0;
  while (l)
  {
    tmp = l->listdeclitem_;
    l->listdeclitem_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListExpr reverseListExpr(ListExpr l)
{
  ListExpr prev = 0;
  ListExpr tmp = 0;
  while (l)
  {
    tmp = l->listexpr_;
    l->listexpr_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}

Program YY_RESULT_Program_ = 0;

Program pProgram(FILE *inp)
{
  Latte_init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Program_;
  }
}
Program psProgram(const char *str)
{
  YY_BUFFER_STATE buf;
  Latte_init_lexer(0);
  buf = Latte_scan_string(str);
  int result = yyparse();
  Latte_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Program_;
  }
}


%}

%union
{
  int    _int;
  char   _char;
  double _double;
  char*  _string;
  Program program_;
  TopDef topdef_;
  ListTopDef listtopdef_;
  ClassMemberDef classmemberdef_;
  ListClassMemberDef listclassmemberdef_;
  FieldDeclItem fielddeclitem_;
  ListFieldDeclItem listfielddeclitem_;
  FnArg fnarg_;
  ListFnArg listfnarg_;
  Block block_;
  ListStmt liststmt_;
  Stmt stmt_;
  DeclItem declitem_;
  ListDeclItem listdeclitem_;
  Expr expr_;
  ListExpr listexpr_;
  Type type_;
  AssOp assop_;
  IncrOp incrop_;
  DecrOp decrop_;
  LBracket lbracket_;
  LParen lparen_;
  Dot dot_;
  NegOp negop_;
  NotOp notop_;
  AndOp andop_;
  OrOp orop_;
  AddOp addop_;
  MulOp mulop_;
  RelOp relop_;
}

%token _ERROR_
%token _SYMB_15    /*   !   */
%token _SYMB_27    /*   !=   */
%token _SYMB_21    /*   %   */
%token _SYMB_16    /*   &&   */
%token _SYMB_0    /*   (   */
%token _SYMB_1    /*   )   */
%token _SYMB_19    /*   *   */
%token _SYMB_18    /*   +   */
%token _SYMB_11    /*   ++   */
%token _SYMB_5    /*   ,   */
%token _SYMB_14    /*   -   */
%token _SYMB_12    /*   --   */
%token _SYMB_13    /*   .   */
%token _SYMB_20    /*   /   */
%token _SYMB_6    /*   :   */
%token _SYMB_4    /*   ;   */
%token _SYMB_22    /*   <   */
%token _SYMB_23    /*   <=   */
%token _SYMB_10    /*   =   */
%token _SYMB_26    /*   ==   */
%token _SYMB_24    /*   >   */
%token _SYMB_25    /*   >=   */
%token _SYMB_9    /*   [   */
%token _SYMB_7    /*   []   */
%token _SYMB_8    /*   ]   */
%token _SYMB_28    /*   boolean   */
%token _SYMB_29    /*   class   */
%token _SYMB_30    /*   else   */
%token _SYMB_31    /*   extends   */
%token _SYMB_32    /*   false   */
%token _SYMB_33    /*   for   */
%token _SYMB_34    /*   if   */
%token _SYMB_35    /*   int   */
%token _SYMB_36    /*   new   */
%token _SYMB_37    /*   null   */
%token _SYMB_38    /*   return   */
%token _SYMB_39    /*   self   */
%token _SYMB_40    /*   string   */
%token _SYMB_41    /*   true   */
%token _SYMB_42    /*   void   */
%token _SYMB_43    /*   while   */
%token _SYMB_2    /*   {   */
%token _SYMB_17    /*   ||   */
%token _SYMB_3    /*   }   */
%token<_string> _SYMB_44    /*   IntLiteral   */

%type <program_> Program
%type <topdef_> TopDef
%type <listtopdef_> ListTopDef
%type <classmemberdef_> ClassMemberDef
%type <listclassmemberdef_> ListClassMemberDef
%type <fielddeclitem_> FieldDeclItem
%type <listfielddeclitem_> ListFieldDeclItem
%type <fnarg_> FnArg
%type <listfnarg_> ListFnArg
%type <block_> Block
%type <liststmt_> ListStmt
%type <stmt_> Stmt
%type <declitem_> DeclItem
%type <listdeclitem_> ListDeclItem
%type <expr_> Expr7
%type <expr_> Expr6
%type <expr_> Expr5
%type <expr_> Expr4
%type <expr_> Expr3
%type <expr_> Expr2
%type <expr_> Expr1
%type <expr_> Expr
%type <listexpr_> ListExpr
%type <type_> Type
%type <assop_> AssOp
%type <incrop_> IncrOp
%type <decrop_> DecrOp
%type <lbracket_> LBracket
%type <lparen_> LParen
%type <dot_> Dot
%type <negop_> NegOp
%type <notop_> NotOp
%type <andop_> AndOp
%type <orop_> OrOp
%type <addop_> AddOp
%type <mulop_> MulOp
%type <relop_> RelOp

%token<_string> _STRING_
%token<_string> _IDENT_

%start Program
%%
Program : ListTopDef { $$ = make_Program($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; YY_RESULT_Program_= $$; }
;
TopDef : Type _IDENT_ _SYMB_0 ListFnArg _SYMB_1 Block { $$ = make_FnDef($1, $2, $4, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_29 _IDENT_ _SYMB_2 ListClassMemberDef _SYMB_3 { $$ = make_ClassDef($2, reverseListClassMemberDef($4)); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_29 _IDENT_ _SYMB_31 _IDENT_ _SYMB_2 ListClassMemberDef _SYMB_3 { $$ = make_ClassDefExtends($2, $4, reverseListClassMemberDef($6)); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
ListTopDef : TopDef { $$ = make_ListTopDef($1, 0);  }
  | TopDef ListTopDef { $$ = make_ListTopDef($1, $2);  }
;
ClassMemberDef : Type ListFieldDeclItem _SYMB_4 { $$ = make_FieldDecl($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | Type _IDENT_ _SYMB_0 ListFnArg _SYMB_1 Block { $$ = make_Method($1, $2, $4, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
ListClassMemberDef : /* empty */ { $$ = 0;  }
  | ListClassMemberDef ClassMemberDef { $$ = make_ListClassMemberDef($2, $1);  }
;
FieldDeclItem : _IDENT_ { $$ = make_FieldDeclItem($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
ListFieldDeclItem : FieldDeclItem { $$ = make_ListFieldDeclItem($1, 0);  }
  | FieldDeclItem _SYMB_5 ListFieldDeclItem { $$ = make_ListFieldDeclItem($1, $3);  }
;
FnArg : Type _IDENT_ { $$ = make_FnArg($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
ListFnArg : /* empty */ { $$ = 0;  }
  | FnArg { $$ = make_ListFnArg($1, 0);  }
  | FnArg _SYMB_5 ListFnArg { $$ = make_ListFnArg($1, $3);  }
;
Block : _SYMB_2 ListStmt _SYMB_3 { $$ = make_Block(reverseListStmt($2)); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
ListStmt : /* empty */ { $$ = 0;  }
  | ListStmt Stmt { $$ = make_ListStmt($2, $1);  }
;
Stmt : _SYMB_4 { $$ = make_SEmpty(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | Block { $$ = make_SBlock($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | Type ListDeclItem _SYMB_4 { $$ = make_SDecl($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | Expr AssOp Expr _SYMB_4 { $$ = make_SAss($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | Expr IncrOp _SYMB_4 { $$ = make_SIncr($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | Expr DecrOp _SYMB_4 { $$ = make_SDecr($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_38 Expr _SYMB_4 { $$ = make_SRet($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_38 _SYMB_4 { $$ = make_SVRet(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | Expr _SYMB_4 { $$ = make_SExpr($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_43 _SYMB_0 Expr _SYMB_1 Stmt { $$ = make_SWhile($3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_33 _SYMB_0 Type _IDENT_ _SYMB_6 Expr _SYMB_1 Stmt { $$ = make_SFor($3, $4, $6, $8); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_34 _SYMB_0 Expr _SYMB_1 Stmt { $$ = make_SIf($3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_34 _SYMB_0 Expr _SYMB_1 Stmt _SYMB_30 Stmt { $$ = make_SIfElse($3, $5, $7); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
DeclItem : _IDENT_ { $$ = make_DNoInit($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _IDENT_ AssOp Expr { $$ = make_DInit($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
ListDeclItem : DeclItem { $$ = make_ListDeclItem($1, 0);  }
  | DeclItem _SYMB_5 ListDeclItem { $$ = make_ListDeclItem($1, $3);  }
;
Expr7 : _IDENT_ { $$ = make_EVar($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_44 { $$ = make_ELitInt($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_41 { $$ = make_ELitTrue(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_32 { $$ = make_ELitFalse(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_39 { $$ = make_ESelf(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_37 { $$ = make_ENull(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_0 Expr _SYMB_1 _SYMB_37 { $$ = make_ECastedNull($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_0 Type _SYMB_7 _SYMB_1 _SYMB_37 { $$ = make_ECastedArrNull($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _STRING_ { $$ = make_ELitStr($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | Expr7 LBracket Expr _SYMB_8 { $$ = make_EArrElem($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _IDENT_ LParen ListExpr _SYMB_1 { $$ = make_ECallFunc($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | Expr7 Dot _IDENT_ { $$ = make_EField($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | Expr7 Dot _IDENT_ LParen ListExpr _SYMB_1 { $$ = make_ECallMethod($1, $2, $3, $4, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_0 Expr _SYMB_1 { $$ = $2; $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
Expr6 : _SYMB_36 Type _SYMB_9 Expr _SYMB_8 { $$ = make_ENewArray($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_36 _IDENT_ { $$ = make_ENewClass($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | Expr7 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
Expr5 : NegOp Expr5 { $$ = make_ENeg($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | NotOp Expr5 { $$ = make_ENot($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | Expr6 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
Expr4 : Expr4 MulOp Expr5 { $$ = make_EMul($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | Expr5 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
Expr3 : Expr3 AddOp Expr4 { $$ = make_EAdd($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | Expr4 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
Expr2 : Expr2 RelOp Expr3 { $$ = make_ERel($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | Expr3 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
Expr1 : Expr2 AndOp Expr1 { $$ = make_EAnd($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | Expr2 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
Expr : Expr1 OrOp Expr { $$ = make_EOr($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | Expr1 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
ListExpr : /* empty */ { $$ = 0;  }
  | Expr { $$ = make_ListExpr($1, 0);  }
  | Expr _SYMB_5 ListExpr { $$ = make_ListExpr($1, $3);  }
;
Type : _SYMB_35 { $$ = make_TInt(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_40 { $$ = make_TStr(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_28 { $$ = make_TBool(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_42 { $$ = make_TVoid(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | Type _SYMB_7 { $$ = make_TArray($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _IDENT_ { $$ = make_TClass($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
AssOp : _SYMB_10 { $$ = make_AssOp(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
IncrOp : _SYMB_11 { $$ = make_IncrOp(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
DecrOp : _SYMB_12 { $$ = make_DecrOp(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
LBracket : _SYMB_9 { $$ = make_LBracket(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
LParen : _SYMB_0 { $$ = make_LParen(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
Dot : _SYMB_13 { $$ = make_Dot(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
NegOp : _SYMB_14 { $$ = make_NegOp(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
NotOp : _SYMB_15 { $$ = make_NotOp(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
AndOp : _SYMB_16 { $$ = make_AndOp(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
OrOp : _SYMB_17 { $$ = make_OrOp(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
AddOp : _SYMB_18 { $$ = make_Plus(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_14 { $$ = make_Minus(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
MulOp : _SYMB_19 { $$ = make_Times(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_20 { $$ = make_Div(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_21 { $$ = make_Mod(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;
RelOp : _SYMB_22 { $$ = make_LTH(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_23 { $$ = make_LE(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_24 { $$ = make_GTH(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_25 { $$ = make_GE(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_26 { $$ = make_EQU(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
  | _SYMB_27 { $$ = make_NE(); $$->line_number = @$.first_line; $$->char_number = @$.first_column;  }
;

%%
void yyerror(const char *str)
{
  extern char *Lattetext;
  fprintf(stderr,"error: %d,%d: %s at %s\n",
  Lattelloc.first_line, Lattelloc.first_column, str, Lattetext);
}

