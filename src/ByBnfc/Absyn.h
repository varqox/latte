#ifndef ABSYN_HEADER
#define ABSYN_HEADER

/* C++ Abstract Syntax Interface generated by the BNF Converter.*/

/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef double Double;
typedef char* String;
typedef char* Ident;
typedef char* IntLiteral;

/********************   Forward Declarations    ***********************/

struct ListTopDef_;
typedef struct ListTopDef_ *ListTopDef;

struct ListClassMemberDef_;
typedef struct ListClassMemberDef_ *ListClassMemberDef;

struct ListFieldDeclItem_;
typedef struct ListFieldDeclItem_ *ListFieldDeclItem;

struct ListFnArg_;
typedef struct ListFnArg_ *ListFnArg;

struct ListStmt_;
typedef struct ListStmt_ *ListStmt;

struct ListDeclItem_;
typedef struct ListDeclItem_ *ListDeclItem;

struct ListExpr_;
typedef struct ListExpr_ *ListExpr;

struct Program_;
typedef struct Program_ *Program;

struct TopDef_;
typedef struct TopDef_ *TopDef;

struct ClassMemberDef_;
typedef struct ClassMemberDef_ *ClassMemberDef;

struct FieldDeclItem_;
typedef struct FieldDeclItem_ *FieldDeclItem;

struct FnArg_;
typedef struct FnArg_ *FnArg;

struct Block_;
typedef struct Block_ *Block;

struct Stmt_;
typedef struct Stmt_ *Stmt;

struct DeclItem_;
typedef struct DeclItem_ *DeclItem;

struct Expr_;
typedef struct Expr_ *Expr;

struct Type_;
typedef struct Type_ *Type;

struct AssOp_;
typedef struct AssOp_ *AssOp;

struct IncrOp_;
typedef struct IncrOp_ *IncrOp;

struct DecrOp_;
typedef struct DecrOp_ *DecrOp;

struct LBracket_;
typedef struct LBracket_ *LBracket;

struct LParen_;
typedef struct LParen_ *LParen;

struct Dot_;
typedef struct Dot_ *Dot;

struct NegOp_;
typedef struct NegOp_ *NegOp;

struct NotOp_;
typedef struct NotOp_ *NotOp;

struct AndOp_;
typedef struct AndOp_ *AndOp;

struct OrOp_;
typedef struct OrOp_ *OrOp;

struct AddOp_;
typedef struct AddOp_ *AddOp;

struct MulOp_;
typedef struct MulOp_ *MulOp;

struct RelOp_;
typedef struct RelOp_ *RelOp;

/********************   Abstract Syntax Classes    ********************/

struct Program_
{
  int line_number, char_number;
  enum { is_Program } kind;
  union
  {
    struct { ListTopDef listtopdef_; } program_;
  } u;
};

Program make_Program(ListTopDef p0);

struct TopDef_
{
  int line_number, char_number;
  enum { is_FnDef, is_ClassDef, is_ClassDefExtends } kind;
  union
  {
    struct { Block block_; Ident ident_; ListFnArg listfnarg_; Type type_; } fndef_;
    struct { Ident ident_; ListClassMemberDef listclassmemberdef_; } classdef_;
    struct { Ident ident_1, ident_2; ListClassMemberDef listclassmemberdef_; } classdefextends_;
  } u;
};

TopDef make_FnDef(Type p0, Ident p1, ListFnArg p2, Block p3);
TopDef make_ClassDef(Ident p0, ListClassMemberDef p1);
TopDef make_ClassDefExtends(Ident p0, Ident p1, ListClassMemberDef p2);

struct ListTopDef_
{
  TopDef topdef_;
  ListTopDef listtopdef_;
};

ListTopDef make_ListTopDef(TopDef p1, ListTopDef p2);

struct ClassMemberDef_
{
  int line_number, char_number;
  enum { is_FieldDecl, is_Method } kind;
  union
  {
    struct { ListFieldDeclItem listfielddeclitem_; Type type_; } fielddecl_;
    struct { Block block_; Ident ident_; ListFnArg listfnarg_; Type type_; } method_;
  } u;
};

ClassMemberDef make_FieldDecl(Type p0, ListFieldDeclItem p1);
ClassMemberDef make_Method(Type p0, Ident p1, ListFnArg p2, Block p3);

struct ListClassMemberDef_
{
  ClassMemberDef classmemberdef_;
  ListClassMemberDef listclassmemberdef_;
};

ListClassMemberDef make_ListClassMemberDef(ClassMemberDef p1, ListClassMemberDef p2);

struct FieldDeclItem_
{
  int line_number, char_number;
  enum { is_FieldDeclItem } kind;
  union
  {
    struct { Ident ident_; } fielddeclitem_;
  } u;
};

FieldDeclItem make_FieldDeclItem(Ident p0);

struct ListFieldDeclItem_
{
  FieldDeclItem fielddeclitem_;
  ListFieldDeclItem listfielddeclitem_;
};

ListFieldDeclItem make_ListFieldDeclItem(FieldDeclItem p1, ListFieldDeclItem p2);

struct FnArg_
{
  int line_number, char_number;
  enum { is_FnArg } kind;
  union
  {
    struct { Ident ident_; Type type_; } fnarg_;
  } u;
};

FnArg make_FnArg(Type p0, Ident p1);

struct ListFnArg_
{
  FnArg fnarg_;
  ListFnArg listfnarg_;
};

ListFnArg make_ListFnArg(FnArg p1, ListFnArg p2);

struct Block_
{
  int line_number, char_number;
  enum { is_Block } kind;
  union
  {
    struct { ListStmt liststmt_; } block_;
  } u;
};

Block make_Block(ListStmt p0);

struct ListStmt_
{
  Stmt stmt_;
  ListStmt liststmt_;
};

ListStmt make_ListStmt(Stmt p1, ListStmt p2);

struct Stmt_
{
  int line_number, char_number;
  enum { is_SEmpty, is_SBlock, is_SDecl, is_SAss, is_SIncr, is_SDecr, is_SRet, is_SVRet, is_SExpr, is_SWhile, is_SFor, is_SIf, is_SIfElse } kind;
  union
  {
    struct { Block block_; } sblock_;
    struct { ListDeclItem listdeclitem_; Type type_; } sdecl_;
    struct { AssOp assop_; Expr expr_1, expr_2; } sass_;
    struct { Expr expr_; IncrOp incrop_; } sincr_;
    struct { DecrOp decrop_; Expr expr_; } sdecr_;
    struct { Expr expr_; } sret_;
    struct { Expr expr_; } sexpr_;
    struct { Expr expr_; Stmt stmt_; } swhile_;
    struct { Expr expr_; Ident ident_; Stmt stmt_; Type type_; } sfor_;
    struct { Expr expr_; Stmt stmt_; } sif_;
    struct { Expr expr_; Stmt stmt_1, stmt_2; } sifelse_;
  } u;
};

Stmt make_SEmpty(void);
Stmt make_SBlock(Block p0);
Stmt make_SDecl(Type p0, ListDeclItem p1);
Stmt make_SAss(Expr p0, AssOp p1, Expr p2);
Stmt make_SIncr(Expr p0, IncrOp p1);
Stmt make_SDecr(Expr p0, DecrOp p1);
Stmt make_SRet(Expr p0);
Stmt make_SVRet(void);
Stmt make_SExpr(Expr p0);
Stmt make_SWhile(Expr p0, Stmt p1);
Stmt make_SFor(Type p0, Ident p1, Expr p2, Stmt p3);
Stmt make_SIf(Expr p0, Stmt p1);
Stmt make_SIfElse(Expr p0, Stmt p1, Stmt p2);

struct DeclItem_
{
  int line_number, char_number;
  enum { is_DNoInit, is_DInit } kind;
  union
  {
    struct { Ident ident_; } dnoinit_;
    struct { AssOp assop_; Expr expr_; Ident ident_; } dinit_;
  } u;
};

DeclItem make_DNoInit(Ident p0);
DeclItem make_DInit(Ident p0, AssOp p1, Expr p2);

struct ListDeclItem_
{
  DeclItem declitem_;
  ListDeclItem listdeclitem_;
};

ListDeclItem make_ListDeclItem(DeclItem p1, ListDeclItem p2);

struct Expr_
{
  int line_number, char_number;
  enum { is_EVar, is_ELitInt, is_ELitTrue, is_ELitFalse, is_ESelf, is_ENull, is_ECastedNull, is_ECastedArrNull, is_ELitStr, is_EArrElem, is_ECallFunc, is_EField, is_ECallMethod, is_ENewArray, is_ENewClass, is_ENeg, is_ENot, is_EMul, is_EAdd, is_ERel, is_EAnd, is_EOr } kind;
  union
  {
    struct { Ident ident_; } evar_;
    struct { IntLiteral intliteral_; } elitint_;
    struct { Expr expr_; } ecastednull_;
    struct { Type type_; } ecastedarrnull_;
    struct { String string_; } elitstr_;
    struct { Expr expr_1, expr_2; LBracket lbracket_; } earrelem_;
    struct { Ident ident_; LParen lparen_; ListExpr listexpr_; } ecallfunc_;
    struct { Dot dot_; Expr expr_; Ident ident_; } efield_;
    struct { Dot dot_; Expr expr_; Ident ident_; LParen lparen_; ListExpr listexpr_; } ecallmethod_;
    struct { Expr expr_; Type type_; } enewarray_;
    struct { Ident ident_; } enewclass_;
    struct { Expr expr_; NegOp negop_; } eneg_;
    struct { Expr expr_; NotOp notop_; } enot_;
    struct { Expr expr_1, expr_2; MulOp mulop_; } emul_;
    struct { AddOp addop_; Expr expr_1, expr_2; } eadd_;
    struct { Expr expr_1, expr_2; RelOp relop_; } erel_;
    struct { AndOp andop_; Expr expr_1, expr_2; } eand_;
    struct { Expr expr_1, expr_2; OrOp orop_; } eor_;
  } u;
};

Expr make_EVar(Ident p0);
Expr make_ELitInt(IntLiteral p0);
Expr make_ELitTrue(void);
Expr make_ELitFalse(void);
Expr make_ESelf(void);
Expr make_ENull(void);
Expr make_ECastedNull(Expr p0);
Expr make_ECastedArrNull(Type p0);
Expr make_ELitStr(String p0);
Expr make_EArrElem(Expr p0, LBracket p1, Expr p2);
Expr make_ECallFunc(Ident p0, LParen p1, ListExpr p2);
Expr make_EField(Expr p0, Dot p1, Ident p2);
Expr make_ECallMethod(Expr p0, Dot p1, Ident p2, LParen p3, ListExpr p4);
Expr make_ENewArray(Type p0, Expr p1);
Expr make_ENewClass(Ident p0);
Expr make_ENeg(NegOp p0, Expr p1);
Expr make_ENot(NotOp p0, Expr p1);
Expr make_EMul(Expr p0, MulOp p1, Expr p2);
Expr make_EAdd(Expr p0, AddOp p1, Expr p2);
Expr make_ERel(Expr p0, RelOp p1, Expr p2);
Expr make_EAnd(Expr p0, AndOp p1, Expr p2);
Expr make_EOr(Expr p0, OrOp p1, Expr p2);

struct ListExpr_
{
  Expr expr_;
  ListExpr listexpr_;
};

ListExpr make_ListExpr(Expr p1, ListExpr p2);

struct Type_
{
  int line_number, char_number;
  enum { is_TInt, is_TStr, is_TBool, is_TVoid, is_TArray, is_TClass } kind;
  union
  {
    struct { Type type_; } tarray_;
    struct { Ident ident_; } tclass_;
  } u;
};

Type make_TInt(void);
Type make_TStr(void);
Type make_TBool(void);
Type make_TVoid(void);
Type make_TArray(Type p0);
Type make_TClass(Ident p0);

struct AssOp_
{
  int line_number, char_number;
  enum { is_AssOp } kind;
  union
  {
  } u;
};

AssOp make_AssOp(void);

struct IncrOp_
{
  int line_number, char_number;
  enum { is_IncrOp } kind;
  union
  {
  } u;
};

IncrOp make_IncrOp(void);

struct DecrOp_
{
  int line_number, char_number;
  enum { is_DecrOp } kind;
  union
  {
  } u;
};

DecrOp make_DecrOp(void);

struct LBracket_
{
  int line_number, char_number;
  enum { is_LBracket } kind;
  union
  {
  } u;
};

LBracket make_LBracket(void);

struct LParen_
{
  int line_number, char_number;
  enum { is_LParen } kind;
  union
  {
  } u;
};

LParen make_LParen(void);

struct Dot_
{
  int line_number, char_number;
  enum { is_Dot } kind;
  union
  {
  } u;
};

Dot make_Dot(void);

struct NegOp_
{
  int line_number, char_number;
  enum { is_NegOp } kind;
  union
  {
  } u;
};

NegOp make_NegOp(void);

struct NotOp_
{
  int line_number, char_number;
  enum { is_NotOp } kind;
  union
  {
  } u;
};

NotOp make_NotOp(void);

struct AndOp_
{
  int line_number, char_number;
  enum { is_AndOp } kind;
  union
  {
  } u;
};

AndOp make_AndOp(void);

struct OrOp_
{
  int line_number, char_number;
  enum { is_OrOp } kind;
  union
  {
  } u;
};

OrOp make_OrOp(void);

struct AddOp_
{
  int line_number, char_number;
  enum { is_Plus, is_Minus } kind;
  union
  {
  } u;
};

AddOp make_Plus(void);
AddOp make_Minus(void);

struct MulOp_
{
  int line_number, char_number;
  enum { is_Times, is_Div, is_Mod } kind;
  union
  {
  } u;
};

MulOp make_Times(void);
MulOp make_Div(void);
MulOp make_Mod(void);

struct RelOp_
{
  int line_number, char_number;
  enum { is_LTH, is_LE, is_GTH, is_GE, is_EQU, is_NE } kind;
  union
  {
  } u;
};

RelOp make_LTH(void);
RelOp make_LE(void);
RelOp make_GTH(void);
RelOp make_GE(void);
RelOp make_EQU(void);
RelOp make_NE(void);


#endif
